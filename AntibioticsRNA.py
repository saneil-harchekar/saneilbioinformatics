from copy import deepcopy
if __name__ == "__main__":

    def ReverseComplement(Pattern):
        word = ""

        for i in range(len(Pattern) + 1):
            nucleotide = Pattern[i:i + 1]

            if nucleotide == 'T' or 'U':
                word = word + 'A'
            elif nucleotide == 'A':
                word = word + 'T'
            elif nucleotide == 'G':
                word = word + 'C'
            elif nucleotide == 'C':
                word = word + 'G'

        return word[::-1]
    def Composition(Text, k):
        comp=list()
        for i in range(len(Text)-k+1):
            comp.append(Text[i:i+k])

        return comp

    #new stuhh
    def CodonToAminoAcid(String):
        val = 0
        convFact=0
        i=2
        for symbol in String:
            if symbol=="A":
                val=0
            elif symbol=="C":
                val=1
            elif symbol=="G":
                val=2
            else:
                val=3
            convFact+=(4**i)*val
            i-=1

        if convFact in [0,2]:
            return "K"
        elif convFact in [1,3]:
            return "N"
        elif convFact in [4,5,6,7]:
            return "T"
        elif convFact in [8,10,24,25,26,27]:
            return "R"
        elif convFact in [9,11,52,53,54,55]:
            return "S"
        elif convFact in [12,13,15]:
            return "I"
        elif convFact in [14]:
            return "M"
        elif convFact in [16,18]:
            return "Q"
        elif convFact in [17,19]:
            return "H"
        elif convFact in [20,21,22,23]:
            return "P"
        elif convFact in [28,29,30,31,60,62]:
            return "L"
        elif convFact in [32,34]:
            return "E"
        elif convFact in [33,35]:
            return "D"
        elif convFact in [36,37,38,39]:
            return "A"
        elif convFact in [40,41,42,43]:
            return "G"
        elif convFact in [44,45,46,47]:
            return "V"
        elif convFact in [48,50,56]:
            return "*"
        elif convFact in [49,51]:
            return "Y"
        elif convFact in [57,59]:
            return "C"
        elif convFact in [58]:
            return "W"
        elif convFact in [61,63]:
            return "F"
    def mRNAToPeptideChain(String):
        length=int(len(String)/3)
        peptideChain=""

        for i in range(length):
            codon=String[3*i:3*i+3]
            aa=CodonToAminoAcid(codon)
            if aa == "*":
                return peptideChain
            peptideChain+=aa

        return peptideChain
    def encodedPeptide(Text,Peptide):
        pepLen=len(Peptide)
        GeneticCode=[]
        for i in range(len(Text)-3*pepLen+1):
            mRNA=Text[i:i+3*pepLen]
            revMRNA=ReverseComplement(mRNA)
            pChain=mRNAToPeptideChain(mRNA)
            revPChain=mRNAToPeptideChain(revMRNA)
            if pChain == Peptide or revPChain == Peptide:
                GeneticCode.append(mRNA)

        return GeneticCode
    def Mass(Peptide):
        weight=0
        massDict= {'G': 57,
                   'A': 71,
                   'S': 87,
                   'P': 97,
                   'V': 99,
                   'T': 101,
                   'C': 103,
                   'I': 113,
                   'L': 113,
                   'N': 114,
                   'D': 115,
                   'K': 128,
                   'Q': 128,
                   'E': 129,
                   'M': 131,
                   'H': 137,
                   'F': 147,
                   'R': 156,
                   'Y': 163,
                   'W': 186}
        keys=massDict.keys()
        for symbol in Peptide:
            if symbol in keys:
                weight+=massDict[symbol]
            else:
                weight+=0

        return weight
    def CycloSpectrum(Peptide):
        pepLen=len(Peptide)
        spectrumWeights=[0]
        for i in range(len(Peptide)-1):
            pepCopy=Peptide+Peptide[0:i]
            comp=Composition(pepCopy,i+1)
            for subpep in comp:
                weight=Mass(subpep)
                spectrumWeights.append(weight)

        weight=Mass(Peptide)
        spectrumWeights.append(weight)
        return spectrumWeights

    #necessary for smooth and compact CycloPeptideSequencing
    '''
    def SpectrumTF(Cyclospectrum, Spectrum):
        if len(Cyclospectrum) != len(Spectrum):
            return False
        else:
            for mass in Cyclospectrum:
                if mass not in Spectrum:
                    return False

        return True
    '''
    def ExpandCP(CandidatePeptides,Alphabet):
        ExpandedPeptides = []
        for peptide in CandidatePeptides:
            for a in Alphabet:
                ExpandedPeptides.append(peptide + a)
        return ExpandedPeptides
    def LinearSpectrum(Peptide):
        PrefixMass=[0]
        Alphabet = ['G', 'A', 'S', 'P', 'V', 'T', 'C', 'I', 'L', 'N', 'D', 'K', 'Q', 'E', 'M', 'H', 'F', 'R', 'Y', 'W']
        for i in range(1,len(Peptide)+1):
            for s in Alphabet:
                if s == Peptide[i-1]:
                    PrefixMass.append(PrefixMass[i-1]+Mass(s))
        spectrum=[0]
        for i in range(len(Peptide)):
            for j in range(i+1,len(Peptide)+1):
                spectrum.append(PrefixMass[j]-PrefixMass[i])
        spectrum.sort()
        return spectrum
    def CycloPeptideSequencing(Spectrum):
        CandidatePeptides=[""] #CandidatePeptides ← a set containing only the empty peptide
        FinalPeptides=[] #FinalPeptides ← empty list of strings
        newCandidates=[]
        Spectrum.sort()
        ParentMass=Spectrum[len(Spectrum)-1]
        Alphabet = ['G', 'A', 'S', 'P', 'V', 'T', 'C', 'L', 'N', 'D', 'Q', 'E', 'M', 'H', 'F', 'R', 'Y', 'W']
        #done to restrict the possible appended amino acids to the amino acids that are found
        CandidatePeptides=ExpandCP(CandidatePeptides,Alphabet)
        CP=CandidatePeptides.copy()
        for peptide in CP:
            if CheckCompatibility(LinearSpectrum(peptide), Spectrum) and peptide not in FinalPeptides:
                # print(peptide)
                if Mass(peptide) == ParentMass:
                    FinalPeptides.append(peptide)
            elif Mass(peptide) not in Spectrum:
                CandidatePeptides.remove(peptide)
        CandidateAminoAcids=CandidatePeptides.copy()
        print(CandidateAminoAcids)
        while CandidatePeptides:
            CandidatePeptides=ExpandCP(CandidatePeptides,CandidateAminoAcids)
            CP=CandidatePeptides.copy()
            print(CP,len(CP))
            for peptide in CP:

                if CheckCompatibility(LinearSpectrum(peptide),Spectrum) and peptide not in FinalPeptides:
                    #print(peptide)
                    if Mass(peptide) == ParentMass:
                        FinalPeptides.append(peptide)
                elif Mass(peptide) not in Spectrum:
                    CandidatePeptides.remove(peptide)

            #print(CandidatePeptides,FinalPeptides)



            #  remove Peptide from CandidatePeptides

        print(FinalPeptides)
        return FinalPeptides #return FinalPeptides
    def CheckCompatibility(SpectrumCheck, SpectrumIdeal):
        # Check compatibility with the ideal spectrum
        temp = deepcopy(SpectrumIdeal)
        compatibility = True
        for SpecProt in SpectrumCheck:
            present = 0
            for SpecNum in temp:
                if SpecProt == SpecNum:
                    present = 1
            if present == 1:
                temp.remove(SpecProt)
            if present == 0:
                compatibility = False
                return compatibility
        return compatibility
    def SequencedPeptideBreakDown(Peptides):
        massSet=[]
        sequenceList=[]
        for peptide in Peptides:
            for symbol in peptide:
                sequenceList.append(Mass(symbol))
            massSet.append(sequenceList.copy())
            sequenceList.clear()

        return set(tuple(row) for row in massSet)

    #print CycloPeptideSequencing
    '''
    specString=' 0 71 101 113 131 184 202 214 232 285 303 315 345 416'
    Spectrum=specString.split()
    Spectrum = list(int(num) for num in Spectrum)
    #print(Spectrum)
    #Spectrum=[0, 113, 128, 186, 241, 299, 314, 427]
    pep=CycloPeptideSequencing(Spectrum)
    ans=SequencedPeptideBreakDown(pep)
    f = open('file.txt','w')
    for a in ans:
        for i in range(len(a)):
            if i != len(a)-1:
                f.writelines(str(a[i])+'-')
            else:
                f.writelines(str(a[i])+' ')
'''
    #print LinearSpectrum
    '''
    ans=LinearSpectrum("TFGIDSIWNFDFYPGCPERQHGFWTPTTITNWQGCWAQIWPWKH")
    print(ans)
    f= open('file.txt','w')
    for a in ans:
        f.writelines(str(a)+' ')
'''
    #print CycloSpectrum
    '''
    Peptide="NQEL"
    ans=CycloSpectrum(Peptide)
    print(ans)
    f=open("file.txt","w")
    for a in ans:
        f.writelines(str(a)+" ")
    '''
    #print encodedPeptide
    '''
    Text="TGAGATGGATCGAATGGAGTCCCTGGGGTGTACGGGATAATCTAACTGTTCTGCGCGGGGGGAGCATTTATTTTAAACATTCCCCCGGGTGGCGAGGTCAATATACATAGTGTCCGAACCACCGGTTGGCGGGGTAGTAAGCCGCCTTACGGTACACACTGGATCGAGTGGAGCCCGTGGGGGCGGGGAGGAATCCAGGAGACTTCCCAAAACAGGTAATCAAAGCTCTCCACAAAAACTCAACCGTTTCCGCCCTAGACCCGGCACATAACCTTGTACAAACTGCTGCATGTACAACTACCGTTGGTTGTCGGTTCTGCTATGGTAAGGGTCCGTGGATCTATACAAGAGACAGCGGACCAGACTTTTTCTCCAATGGTATAATCTCCAGCTTTTTTTCTCTTTTGCGTAGGTTCGCTTGTTCACTCAAGCAGAAAGGAGTCACAGCGGAGATACCTACTAGGTACGCGTTCTACGTGACTTGCTCGTAAATCAAAGAGTTCCCAAGCGGCCAATCGCGTAATGGTCTGTGAAGTTAAGTTCACTGCGGATACTTCCGCAAAGTACATCGGGGCTACTGGGAAACATAAATATGCTGTGGCGGTCTAATTGTAACGAGGATAGCCTAGGATGGCTGCGGGTACAGACGCTACGGCGAATAACGCGCAATACCCAGGACTGTTGCCGGGCAGGCCTAGGTCGCTCCTAACACGTAAGCGTATTCGAGAATGATGGGTATTTAGCGCATGGATTGAGTGGTCACCATGGGGTGGTCGGACGACTGGAACACGTGAAGAACCCCCGTCACGTCGAACCCCTTTTTCACCCTGCGAACGACGTTAGGAACGTGGATGTCGAGTACAGGTGTTGGAACTCTCGATGACCTAATACATAGAAAGATGATCCCTTGCAAAGCCTCTGGGGTGGGGGAAAACTTTTCATACTCCCCTCGTAGGAACGGGTATTAGGATACTAGATGGTAAGGACGCAGGAGTCCTCTCACTTACCGACGGCACGATCGCGTGAATCCCAATGTCCATACGCATCCTCCTATGCTTTTGAATAACCCAGTTAGAGTCTGATCGAGTCGAGACTTGTGGGTAATTGATCCGAACGATCTAATTCCTATTCTTTTAGGGAACAGGTCACTCGGAGCGGGCGCCTGACTTCGTGGTTGCCACTATGTAATGGCATACTAACTGAGCTCCCCCGATCGCGTCTGCGTGTATTGCAATATCAATGGTGTGATTTACAAAGTCAGTCACTCTGCGAGATGCCCTTGTCGATTCCTATCCACGATGGTTGCCAACCCGTCTCTTAGGAAAGAACACCGATGTTACTCCCAGAGACACGCTTGAGTAAACTAAAGACCTCTCGAGCAGATCTGCAATGAACCTTAACTCGTTCACACCTGGAACGAGTAACTCCGTGCGATCCCCCAGTTTGTACTCTTACTATTCCCCATGGCGACCATTCGATCCATTATTTCGCGCGATGGTTCAACCATGGTTCCATGCCATTATTAAAGCAACACCGAGGGTAAGAAAAAGTTGCCTTTAGCTGTCACTGATGGAGGGGCACTGTTTCAATATACTTGAGCCAAGTGGTGAAGCGGTTCCCGGGTACTAACACGCAGACTTAGGCGTAGGTAAAGAGCACGTATTAGTTCCCGGCAGAACCGCTCATGCCAAGTCAATCGTCTATGGGATGGAATTGCGGACTAAGCCATCTGCATGGAGCACTCACCTTCCATGCAGGTGGTGGAACGCCAATAACAAACGATGGTGTATACGTTTTCTGTTTCAACCTTCGTATGGGTTAGTTGGTCCGTAAGTCGCGGTTATCCAATAGATGAGTCCATTACTCCGCGTGAGTATTAACCTATAAACATTGAAAGTCGGCAATACGACAGTCACTGTGGGCCCTTAGTACTCCGTTAAAGTATAGTATACCTCAATGTTAGTATACGCATGACTGTACCAGCTCCTGGCGGTTCCGAGTCGCTCGGTATACAAAGTTTATATAGTGTTAATTCCCTCTAAAGCATCATTCGCGCCCCTAAGAATACTCCTTACAGATGGGGGCTCTTTTCAAACTAGGCGATAGTAGAAGGTTTTAGTGTGCATCATATTGCCATGCCTAAGTAAATTCGTGTTTAAGTCGGGAACCCGCGGGCGCTGGAGGATGGCTGGTCTGGGCGGGCGGAAGATACACTGTAGTTCCCCCACTGCGGGATTAATAGAGCGCACTTCGCCCGGTTAGTAATTGAGTGACTCAAGGTAACAACGTCTATTGCGCCGGTAAATGCCCCAAGGGGACCACTCAATCCATCCCCACGGGGACCACTCTATCCAAGCAAGCGAGCGTCTACTGAGATAAGCAATTAGAGTTTAGGGATCTCGCGCATGAGAGCTGATGATTTATTCAATTGAGCGTATATCAATAAGCGGCGATTCCTGATGTTGCTCCGCCCCAATTGATCCGCCCGGGCCAACCAAAGAGCGGGAAGTCCTTTCGGATTGTATTCCGGTGCGGGCGAGAGACGAGTCCCCTGGTTACCTCTTAATTCGGGTCCGTAGGTTCACAATTGTGTCCATCAACATCGTCCAGCTGTTTCAACCCAACTGATAGATCGGTCGAATGTTTAGGAGAGAATAAGGACATCCCTCCTAGCCCTGGATTGAATGGTCCCCATGGGGACGGTACGGGAAAATCCACCTTCAAATGGAGGCGTACGTACTAACGGCCTCAAATTGCTGCGAACGGTAAGGACCACCATCTGACGCTGAGCCCTAAAGATTGGCCAATAAACTCTTATCAGGTGGTAAGGGTTTCGTGCGATGTGATTCTATGCATGATTACCTGCGATTAGGCGTGCTCTGTAATATCTCAAGATGACGCCCGTGGTCGCCCAGGCCTACTTGATGCTCTCTGTGGGACACTTTATCTTCTCTCCCTAAGGCTTGTTTGATGAGTAGGTCTCCAATGGGAGGCTATTAAACACGACCCAATCACCCGAGTCGCAGCACGGCCTAAAACGATGTCATTCACTCGTTCATTTGAAACCACCCAACCTATTTGCTACCTGTGCCGATCCCGGTATTGGATTGAGTGGTCTCCATGGGGAGGGGTGAGAACATGCTCGACTTGAAAATGCGGCGTGGATCGAGTGGTCCCCATGGGGTTGTGGGATCATCCTATAAAGGGAATCGCTACATTATAATTTCGTGCGGCAACGTATTTTGTAGTTATACACGTCTTGGCGCGGATGTGCATGGATACCCCAGAACGGTTAGTTTATTCCGTTGGTCGCAGCGATCGCTAGAAACTTTATTCGAAAAAGCCAGTAGGATAATTAGAAGCGTCGATGCGATGGTCGGGGCACTGTCTCGAGGGTCCGTGCTAAGTAAACAGTGTTTTTGCGAGAACTCGAGTTACCTGCTGATGCATGGTGTGAGAGGCCGTATTTGACAAAACAATCTCGCCTCATGAAATCTACGTGAGCACACGGACGCAATTTACAAGACGGTGTAAAACTCCCCTATTTTGCCGCTTTGTTGTTTTTTGTGCTTGCCAACGCTTGACTCAGATACGACACTGTGTGGGTCCATACGTCACTTATTTGAAATTAATCTTCCTTGCCAATTACAGTCGAACGGCCTCGTCTGCTAGGGGCCTGCACCTACGAGACATCTCGACTCAGGTCATTGCATGTTTGGCAGTCCCTGAACAGTATAATCTAGCAAGTTCTGCTGGTGGGGATTGGGAGTTCGACATGGATAGAGTGGTCGCCCTGGGGAACAACTATCCCTCCCAGCTCGAGGGTATCCTAATCCACGCCAATCACTATCTCATTCACTCATCTAGGTTCCCGTTAGCCTGCAGACCGAGGTCCAACAATCGTATGAAAGCAAAGAGAGGTAGAATAACGTGATAAGACTGTCCGTGATTCACACATTACGACGTACAATTTTGGGCAGTCGCACTCGACAGCCGACTTTCATGACTGACGATAGCGCCTCCCCGGGCTAGCAAAGCCCCGACTATCCGGGGGCAATATCGGATAACCACGCTCAGCTACCCGCTGGCTAGGACTCACTCGCAGATCAAGGAAAACTTCGCACAGCATGCACTTAACCTTGTCCTTACGTAATCAGATAGAGATTGGACAGCAACACAACTATCGGGGATTGTCTCAGGCCATGACAGTCTGCATAGGTTTGAGCGCTTCTAGCTCCAATGAGTATACATGGTTTGCACCTCTTAAGCTTATGGATCATGTATTACCACGACATATTTACCTAATCCGTGCGAAAGCCACGTAGTCTGGCTCAGGGACATGTATTTAAACCCCAGGGCGGCATCTCGAATCCCGGCCAGGACCAAGTAATATCGAGACCTATTCGGGATGGTCCCCGGTACCCCTTGTTGCTTGGCTCATACATCTCTGGATAACCGTTGCGCCCTACAGTAGTCTGGGGTGGCTCGCTTGGATTGAATGGTCTCCGTGGGGTAACCTTCTTCTCCTCGGCATCATTGCATATCGCAGACAGACCGCTACACGCCCTGATCTTGATTACTTCTGATAATAGTGATGATCCCGCCATCCTGACCAGAGCTCGGCCCTGAATCCTCCACAGATTACGAAACACTAAAGATAGGAGCAAGGTCCCGAGCTAGTGTTTGTACCGGCCCCACGCGGTAATCCTCAGAGGTACGACCTTTCGGCCTAGAACCTGATCGAGCCGTTTAATCTTCGAGCGAGCTTCCCCAATGAAGGTCCACTGATTGACCACAAACCGAGAGAGTCGACCACAATTGATTCAAGCAGTCCGGCAATGTAAAGAAGGCCTACTTCTCAGGGTTATGAGTCGCGGGCTCCCCAATATACGCTGCGCCGCCCAAAACCGAAGCCATGAGGGATTGACTATGCATGAGCCGGCTTAGACAATGGCTCAACTGTAGTCCCCCCGGTCCCTCGGATACACTGTGGAATCCTGGACAGGGCAGTTCCGACCGCAATAATCCATAACTTTATACGCCACGTCGGGTAGTCTGATCAACCCCCTTTGCCTAGGTAAACGTGTTTTCGTTCTGACAGTCAGAGAACTGCTCACCAGTCTCCCCTCGCGTACGGCCCTCGAGTTTACGCATCACGAGACCAATTCGGCCTAGAAGTAGGTGTCGGGGGAAAGTTGCAAGGTATGGCCTCGCCGATAACGCGAACGGAGATGAGGCTTGGTATAACACACGCTTACAATGTAGAGAAGTAGCGAAGGCCCTAACTGCCGCTGATTAAAACGGACACTGTTACGCCCTCATTGTGTATTTTCCCGAGTCCTACTATGTAACACGTAAATGCACCACCAGAGAATAGGCCACACCGAAATCGATAATATGCGATGTGCTTATAGTACATTGCGCGTTCCTCTGATCAAGCGAATTGTATGGATCCCTGTCTGTAAACGTACCGAGGTTCGAGGGTAGTACGCAACCACGACTCACAGTCATCGGAAGCGTACCTTTCCTAACCCACGATGCTGGCAGATCGGAGACAAAAAGCCATACGCCTTTGTGGCAGCATCTGCACCCTCGACCTCACCACAACTCCACGGCTGGGGACCATATTCATTCCATGTTCCCGTTGTTAGGTTTCTACAAATATGACTCTCGACGATCTGGAATCACGACATCACTCTCCGCCCCTTGTATCATAAACACAGCATTTTACGCAATTTCTGCATAACACCATGATCGAAGTTAGCAACTGGGATACTAACGGGAGAGATAACCTTACAGCTGGGATTGAGGACTACTTCTGGACCTGTCACTCCCATTGAATGAGCGCCACGTTCCGATAATTGGCAGTTTGAGGTCCAAGTAATTAGAGGTGTTAGTAAAAGGCTAAGGGAGGCCATATGTGTTAGGACATGCTACGCCTGTTACTCGCGGTCGTAAGTTTGTCCGGGTAATAAGGCACACAGAGGAACAGATTGGTAGCTAGATCCGTTCGACATCGTGCCCCAGGGCGACCACTCTATCCATATTCGGTACTTTAATGCTAGACCATCAAAGCTACTCCCCATTGCCCGAAAAACCCCAGGGGCTCCACTCGATCCAGCCGGCGATGTCCTCTTAACCCCCAGGGCGACCACTCAATCCAAGATCCAGGGATGAGCTGCTGGACCGGGGAAGGCGGGGGTAGCTTCGCATAAAGACGTTTCTATGGGCCTCACTTTGGTTCCACTTCCTTAATTTCTCGCTATGACCCTGGGGGCACCTCGAACTTGATCAGCACGTCCGACGACCTGAACAGCGACAACGGGACAAAGTTTACGTTCCGTTCCCGCTCGGATCTGACCGCCAATTCGGTGCCACCGTCGGACTGCCTATAAATGCTGAGTTTTCTGAGAGCTCCACCTGAGTTGATCTCATAGTCTGAAAGGGACATCGACGCGGTCCCACTTCGGTGGTTACATAACGCTATCCCAGTCGGCTCCTAACTAGGTGGACATTCCGTACCATGGTAAAACAAGCCTCCTTCGGGCATCTAGGTTTCACAGCTGCTAACGTGGATTGTGAATATGCCTACCGGGAGGTAGAGATTTACGTTAGGATTGCTAGGACCGAGGTCGCGGATGTGCTGTGTCGATTTTATCCTGCAGAATCCCGCCCGTCAAATCACCAGGTTAAACGTATATTCACCCCACTTGTCAATGCTCGTTCTGTCGCCCGCTTCACGGCTGGATTCGTCGGATCACTGGTCTGACAGGTGGATCGAATGGAGCCCATGGGGGTTGGTGCTGAGAAGGGACAAGCCTTCCGCACGCACACAGATGCCCAGGCCTCCAATTTTAGTGTAAAGTAGTTGAGCTGCGATGGGAACTGCAATAAGCCCCCGATGGCCTAAAAGTATGTGACGTTTGCTCATCGTCCCAGCTGCCTAATCGCGATACGTGCGCGGAGAGAGTACTCCCTTGGGGCTTAGAACAGACGCGATCCAAGTAGGGGTATCCGCCTCCATATTGTTTCCTCCAAACTATTTAACTTAGGACGCAGGAGTTTGGTAACGATTGTCCTTTAAGGCACTAACGGGGGGTCTTGTGCTTACTGGCCCTGACAAGCCCGTCTAAGATTACAGAAAAGTGCTGGTGTTGTCGCCCTTTCAAATCACGACGTTCCTTGGTGCCTGTTTTCTAACCACCGAGGCCTGACACAGTTCTTTTTTGATGTACCGATAATCTTGCGTGCAACGCACGACTTCTAAGCATTTAATCCAGTACGAGGCAGACGGGTTGCGCCGCGCCCCCACCGGATAGAGGGGGCATCACCCGCTATTTAGGAGTGGATTGAATGGAGCCCATGGGGGGGGATATCAGTCACACGTGGCATCCCCGAACTCTGGATGCTTGCCGTTAGGCACATGAGACTAGGACCGCGCGACGATACAGATACTTGGGCTCGTTGGAGCCATAAGGCGGCCGAATAATGCGGTCCAGGACCCCCAAGGTCTATGGGCTAGTATTGCACTGATACTCCCGACAAGCAATCATAGACTCCCCAAGGAGACCATTCGATCCATTACGGCCAGCAAGGGTAAGTCCCACGGGTCTTGTGGCAGGTTTGATTCACTCCTGCAACGAAGCCTACTCACGTCCGTCTAATGGAACAAGCAAGAGCCCTCTTACCGGACAGTGCCAGTATGAAAGACCCCACGGACTCCACTCGATCCAAAGCAAGTCATGCGAGTTTCTTTGCGACTCGTGTAGAACCAGTAAGTCCCAGGCTAGCGTCTCTACGATTGGATCGAGACAATCTATTTTGCCCCCTCGCCCTCAGGGGACCCAGTATTACTCCATACAAATTCGTCTTCAACCGTGGAAAACAGCCTACTTGTCGCCCCCGGCGTCCTTTAGTGTGAATCTAAATTCAGATCGGGAGGGGAACCGGGCAATAGGAAATCTCGGTTATTACCTCAGCTGAAAGAATGCTGGCGTTTGTAGGTAGACAATTGCTTGATGCATAGGCGTGACGGGAAGCGACCACCAGCGCCCCTTCGCGTCTTGCCCCACGGACTCCATTCTATCCAACTAGTACAAACTGAAAACACATATAATCAGATCGGGACAAGTTGTGAATGAGATCATAGGAGTGGTCCGGTTGTAAGGCTATCTACGCTGCGTGCTTAGACCTGGCAACGAGATGGACAGTCTCTCTAGGTAGTAAACCGGACTCTGAGGTTTAGGCTGAGATCGGGATAAAACTGTATCTCCTAAAGGCCCAATCGCATCCAGGAGCGTTCCAGCAGAACGGTGCCAGCCAACCCGGGGTAGGGTCTCAGGTGCTGCGGGCACGGAGGCAATGCTCTGACGGAGAAAAGGCCTGCGCTTTCACAGTTCCAATTGAGACCTGGGTCGAAAATAGTAACCGATTCTAAAATCAAGTGAGCTGTGCATTTGCCTGGGCTATCCGCAGTCACTTCTAAGCTATCCCTGCTACCTGTGAACACTTGGAGGGCATAATTTCCACCTAGGAATTAATTACTCGCGACTCACATTAATCTTTTGTTTAAACTTCTGGTCGGATCACCACATTGATAAATTTCGTGTGTGCTTTGTAAGGCGAGGTATAAGTAGCGACAGCCGCTACGTTCAGAAAGTCGTTTGGAGGAGACTGCAGGTTCACTCCATATAGTTTAGCACACTTCTATCGCTACAGGTTGCTATGACCATACAAGTCTTAATGGACCCATCTGGATCGAATGGAGTCCATGGGGCTCGAATACGCGCTTGCCCCATAGAAAATACCGTTTCCTGCTACGCAGTACGGGAACCTCGGCAGCTGTCAAATCCAAGCTCGGAATGTATATAATGTCTACTTTATAGAGAAAAAATGAGGTCCTGTAATGTCGCTACTTGCACGGGGGTACCAGGAAATTATTCCTTGCTCTCCAGAAGATGGTTGGACAAATCCTTTGAACGCTCCTAAGGAAGAAGTTTGTTGCCCAGGGATCCGTGTCACTGCGTACACTTCGTATGATTCCAATCTAAAGTACGATGTAGTATTATCCAACGCCGTTTGCATCGGAATGGCATAGTCCGAGAGCTTGCCCGACAACCCCGGAGCACAAAGCCTGGTCTCATGACTCTCGCCCCTATCCTACGGGTTCTAGTTAGGCGAAAATTAGGCTGCCGTGAGACGCTATGTGGTTTAACGAGAGGCGTTTGAGAGGCGAAACAGTACGTGGGTGGCGGGTGCTGAGTGGCTGCTAATAGAGACTATATGGTCTAATAT"
    Peptide="WIEWSPWG"
    ans=encodedPeptide(Text,Peptide)
    for a in ans:
        print(a)
'''
    #print mRNAToPeptideChain
    '''
    ans=mRNAToPeptideChain("CCAAGUACAGAGAUUAAC")
    print(ans)
    '''


    def CycloPeptideScoring(Spectrum, Peptide):
        TheoreticalSpectrum=CycloSpectrum(Peptide)
        score=0
        for mass in Spectrum:
            if mass in TheoreticalSpectrum:
                TheoreticalSpectrum.remove(mass) #remove so not to count a previously counted mass spectra of the same weight
                score+=1

        return score
    def LinearPeptideScoring(Spectrum,Peptide):
        TheoreticalSpectrum=LinearSpectrum(Peptide)
        score=0
        for mass in Spectrum:
            if mass in TheoreticalSpectrum:
                TheoreticalSpectrum.remove(mass)
                score+=1
        return score
    def Trim(Leaderboard, Spectrum, N):
        dict={}
        PeptideScore=[]
        TrimmedList=[]
        for i in range(len(Leaderboard)):
            dict[Leaderboard[i]]=LinearPeptideScoring(Spectrum,Leaderboard[i])
            PeptideScore.append(LinearPeptideScoring(Spectrum,Leaderboard[i]))

        OrderedPeptides=sorted(dict,key=dict.get,reverse=True)
        PeptideScore.sort(reverse=True)
        #NthScore=PeptideScore[N-1]
        OrderedCopy=OrderedPeptides.copy()
        for i in range(N-1,len(Leaderboard)):
            if PeptideScore[i] < PeptideScore[N-1]:
                OrderedPeptides.remove(OrderedCopy[i])
        return OrderedPeptides
    def LeaderboardCycloSpectrumSequencing(Spectrum,N):
        Leaderboard=[""]
        LeaderPeptide=''
        Spectrum.sort()
        ParentMass=Spectrum[len(Spectrum)-1]
        Alphabet = ['G', 'A', 'S', 'P', 'V', 'T', 'C', 'L', 'N', 'D', 'Q', 'E', 'M', 'H', 'F', 'R', 'Y', 'W']
        while Leaderboard:
            Leaderboard=ExpandCP(Leaderboard,Alphabet)
            LeaderCopy=Leaderboard.copy()
            for peptide in LeaderCopy:
                if Mass(peptide) == ParentMass:
                    if LinearPeptideScoring(Spectrum,peptide) > LinearPeptideScoring(Spectrum,LeaderPeptide):
                        LeaderPeptide=peptide
                elif Mass(peptide) > ParentMass:
                    Leaderboard.remove(peptide)
            Leaderboard=Trim(Leaderboard,Spectrum,N)
        return LeaderPeptide
    def PeptideBreakDown(Peptide):
        massList=[]
        for symbol in Peptide:
            massList.append(Mass(symbol))
        return massList
    def SpectralConvolution(Spectrum):
        Spectrum.sort(reverse=True)
        convolution=[]
        for i in range(len(Spectrum)):
            for j in range(i+1,len(Spectrum)):
                if Spectrum[i]-Spectrum[j] != 0: #we dont want 0's
                    convolution.append(Spectrum[i]-Spectrum[j])
        convolution.sort()
        return convolution
    def ConvololutionLeaderBoardCyclopeptideSequencing(Spectrum, N, M):
        ConvolutionSpectrum=SpectralConvolution(Spectrum)
        concopy=ConvolutionSpectrum.copy()
        for Mass in concopy:
            if  (Mass>=57 and Mass<=200):
                ConvolutionSpectrum.remove(Mass)

        print(ConvolutionSpectrum)








    #print CycloPeptideScoring

    spec="0 71 98 99 131 202 202 202 202 202 299 333 333 333 503"
    Spectrum=spec.split()
    Spectrum=list(int(num) for num in Spectrum)
    pep="MAMA"
    ans=CycloPeptideScoring(Spectrum,pep)
    print(ans)

    #print LinearPeptideScoring

    spec = "0 97 97 129 129 194 203 226 226 258 323 323 323 355 403 452"
    Spectrum = spec.split()
    Spectrum = list(int(num) for num in Spectrum)
    pep = "PEEP"
    ans = LinearPeptideScoring(Spectrum, pep)
    print(ans)
    #print Trim
    '''
    leaderString="ILWCWWTCDVCMVFLGVADDRSIMTSFYCVPTPQPWRQKMQNFCEKIAES FISVDQQTCDEHEERCHGTESWVGANNFINLFKKGLPNINNKKKNAELSM DMQCKNFTTMSHFPQWTDCHSEHHETCTFAQRNELSWFRYWHGVLAVQNA RMSFRAATYWTHLNWEHGDNYFPVTYQCNMCWTGSMSCLCKVWNMTLHMR NPTCHDGCKSCCWNDWRTFPLCFETVFPEKFSMPQPCIFCDPSQIWFCCK WILSLCTMPTSILCKPIAQKHLNQPIMEPHHQQYCNQENNCTTHKWMNDK WENKSHCLYKFMARITVSAMDKAAYFRRHGMHWAVLCAWGVSSRFNDLPQ WPLKIGQNCYPMLTKAFVCRVTYQAGIECKRTPQIYYNVNWWTMYVICLT VNQNTGPQITQEEHPAGASEYDQNKVDKADMAKKPSIREWHDYYIYRPHV QCKIQNWCMVVVRHMRGKHHLFSQLIDQERTEDKCCATHLQLWDEYIIND SSMIAGTFWAIYRVTSLTSYLLHRHASDRAFKEIFQLMHYISSDHPPVSV ALCVAAWEPSDKWQYVHTQCEQWSGVNQWCCYAYHCCPAWFKMEEMFGSK PFFFKSGYQMECIETFRKIIHYVFPGMDFHDRESDSWEPVNSDMQGQMLD KRLADRRIQVVPIIPMQGYCPHTMVHMAAPQIYATDDKWVDNETHCLGAI ESADYNNISCWAHTMIVREFNCELWICYSLNCDVYVYQQAEGRLGDEQWM"
    Leaderboard=leaderString.split()
    specString="0 57 57 57 71 87 87 87 87 87 97 97 99 99 99 101 101 103 103 113 113 113 113 113 114 115 115 115 115 115 128 128 128 128 128 128 128 128 128 129 129 131 131 131 131 131 137 147 156 163 163 172 184 186 186 188 188 188 194 198 198 200 200 202 202 202 210 212 218 218 224 227 227 228 231 232 234 241 242 243 243 243 243 243 244 244 250 256 256 257 257 257 259 259 259 260 262 262 276 281 285 285 287 291 299 301 301 303 305 311 315 315 319 323 325 325 330 331 340 344 346 347 349 355 356 357 358 358 358 359 360 360 361 362 362 363 363 363 369 372 372 374 374 374 380 382 384 385 388 390 390 412 415 419 422 426 427 429 433 434 438 443 444 446 446 447 447 448 450 450 453 459 459 460 462 462 470 471 475 476 477 478 479 483 486 486 487 489 489 490 491 491 497 500 500 502 505 511 518 525 530 533 543 546 547 547 552 554 558 558 562 562 562 563 565 572 572 572 573 575 576 577 578 581 584 585 587 590 590 591 601 605 606 610 615 615 616 617 617 619 622 624 633 633 634 639 642 645 646 658 659 659 660 661 662 664 675 678 678 680 685 686 687 690 693 693 700 702 703 704 704 706 709 709 713 718 719 721 723 729 734 735 738 743 745 746 746 747 748 748 750 759 761 765 765 767 770 773 773 774 777 780 788 790 793 795 801 804 806 806 806 808 815 815 822 822 822 832 834 834 837 837 841 847 858 858 860 860 861 863 863 865 866 874 876 876 877 882 886 888 893 894 896 898 898 901 902 905 905 905 909 916 917 917 921 921 921 934 935 935 937 944 945 945 950 952 953 965 969 978 978 981 985 989 990 991 991 991 992 1000 1001 1005 1008 1014 1018 1022 1022 1022 1024 1024 1024 1024 1025 1026 1029 1030 1033 1034 1036 1045 1048 1048 1049 1054 1058 1063 1065 1065 1068 1075 1076 1080 1081 1082 1084 1103 1105 1105 1105 1105 1109 1119 1120 1123 1125 1128 1128 1133 1137 1137 1139 1139 1141 1142 1145 1153 1153 1155 1157 1162 1162 1162 1162 1164 1164 1171 1176 1178 1183 1185 1189 1192 1196 1196 1218 1221 1224 1224 1226 1232 1233 1234 1236 1240 1242 1243 1248 1248 1248 1251 1252 1256 1256 1256 1256 1259 1263 1265 1268 1270 1270 1272 1277 1281 1283 1284 1290 1291 1293 1308 1309 1311 1323 1327 1329 1335 1339 1339 1345 1346 1346 1349 1352 1352 1355 1360 1362 1363 1364 1365 1371 1371 1371 1376 1380 1381 1383 1384 1384 1384 1384 1387 1394 1398 1405 1406 1406 1421 1421 1424 1428 1428 1439 1448 1450 1452 1458 1463 1467 1468 1468 1470 1474 1475 1477 1481 1483 1486 1486 1490 1491 1493 1497 1499 1499 1502 1507 1508 1511 1512 1515 1515 1515 1520 1521 1522 1527 1534 1536 1543 1552 1555 1563 1578 1580 1583 1586 1591 1595 1596 1596 1599 1602 1603 1605 1606 1608 1609 1611 1612 1614 1614 1614 1615 1622 1625 1627 1630 1630 1630 1633 1637 1643 1648 1651 1663 1670 1671 1683 1685 1686 1690 1691 1692 1698 1708 1709 1709 1711 1713 1718 1722 1724 1724 1726 1727 1728 1729 1730 1734 1740 1742 1743 1743 1743 1758 1758 1758 1761 1779 1779 1791 1798 1798 1800 1801 1805 1805 1807 1810 1811 1813 1814 1815 1818 1823 1828 1839 1840 1840 1843 1846 1849 1854 1855 1856 1857 1857 1871 1871 1876 1880 1885 1886 1887 1889 1906 1910 1910 1910 1918 1926 1927 1928 1929 1930 1935 1936 1941 1941 1942 1943 1946 1956 1959 1967 1968 1968 1968 1970 1970 1977 1986 1986 1991 1993 1999 2004 2011 2015 2017 2025 2025 2038 2043 2046 2048 2049 2054 2055 2055 2057 2058 2058 2058 2066 2067 2069 2074 2081 2082 2083 2083 2085 2090 2098 2105 2106 2114 2119 2119 2130 2130 2130 2132 2153 2153 2161 2161 2167 2168 2168 2168 2169 2170 2170 2172 2177 2180 2186 2186 2187 2187 2212 2213 2213 2217 2218 2220 2229 2229 2243 2247 2247 2248 2248 2254 2260 2267 2267 2269 2269 2270 2281 2281 2281 2284 2289 2292 2299 2301 2305 2315 2315 2316 2326 2328 2330 2333 2333 2356 2356 2357 2360 2363 2368 2369 2373 2375 2375 2376 2376 2380 2385 2395 2406 2412 2412 2413 2415 2418 2420 2420 2420 2429 2430 2430 2443 2446 2457 2469 2472 2472 2487 2488 2491 2491 2493 2493 2503 2504 2504 2508 2511 2513 2516 2526 2528 2531 2533 2535 2543 2544 2544 2546 2548 2549 2558 2568 2578 2580 2587 2592 2600 2606 2613 2616 2616 2619 2619 2620 2627 2630 2632 2632 2639 2639 2644 2648 2661 2663 2673 2675 2677 2677 2679 2691 2691 2693 2696 2700 2705 2706 2714 2715 2716 2731 2734 2740 2744 2745 2745 2747 2748 2760 2770 2776 2778 2792 2792 2792 2792 2801 2803 2804 2805 2819 2827 2827 2829 2831 2831 2833 2834 2846 2847 2854 2862 2863 2871 2873 2873 2875 2891 2891 2904 2905 2918 2920 2920 2920 2928 2932 2934 2941 2942 2947 2958 2959 2960 2962 2964 2974 2976 2978 2982 2988 2990 3002 3015 3019 3033 3035 3035 3035 3046 3049 3049 3051 3054 3063 3065 3069 3073 3073 3075 3075 3088 3089 3103 3106 3106 3110 3118 3130 3130 3148 3150 3152 3152 3153 3160 3163 3166 3177 3178 3182 3186 3188 3191 3191 3197 3220 3221 3231 3237 3238 3239 3245 3249 3251 3267 3273 3277 3278 3281 3281 3291 3294 3294 3306 3306 3310 3317 3322 3325 3334 3338 3346 3350 3351 3354 3374 3391 3393 3404 3404 3409 3409 3409 3409 3412 3414 3420 3425 3431 3434 3437 3438 3438 3450 3453 3461 3488 3496 3501 3511 3513 3522 3532 3533 3535 3537 3537 3537 3540 3540 3548 3551 3552 3553 3565 3589 3592 3598 3598 3600 3600 3611 3619 3641 3650 3651 3661 3664 3665 3668 3668 3668 3668 3678 3685 3697 3699 3715 3720 3721 3728 3729 3739 3764 3769 3775 3778 3781 3782 3783 3784 3792 3796 3796 3796 3816 3843 3849 3853 3856 3858 3862 3876 3878 3883 3895 3895 3896 3897 3909 3910 3911 3915 3945 3952 3959 3966 3971 3979 3984 3986 3990 3993 4010 4014 4023 4024 4025 4026 4044 4046 4073 4083 4087 4089 4094 4097 4097 4099 4118 4121 4138 4138 4143 4154 4154 4172 4174 4176 4177 4211 4212 4215 4220 4222 4235 4246 4251 4269 4271 4275 4291 4302 4305 4306 4307 4326 4336 4343 4348 4348 4359 4374 4378 4382 4406 4430 4433 4434 4434 4435 4439 4449 4456 4463 4477 4479 4505 4534 4536 4537 4543 4550 4561 4562 4562 4576 4576 4580 4633 4637 4649 4663 4665 4668 4673 4674 4690 4690 4739 4748 4760 4762 4774 4793 4796 4796 4803 4818 4859 4861 4861 4867 4911 4921 4924 4924 4931 4958 4960 4995 5024 5034 5039 5052 5052 5059 5121 5123 5152 5165 5167 5180 5222 5236 5249 5280 5293 5295 5350 5377 5408 5408 5478 5505 5521 5606 5618 5719"
    Spectrum = specString.split()
    Spectrum = list(int(num) for num in Spectrum)
    N=5
    ans=Trim(Leaderboard,Spectrum,N)
    f = open('file.txt', 'w')
    for a in ans:
        f.writelines(str(a) + " ")
    '''
    #print LeaderboardCycloSpectrumSequencing
    '''
    N=157
    specString = "0 71 71 87 97 99 101 103 113 114 115 115 115 128 128 128 128 129 131 137 137 147 186 186 186 202 208 215 216 218 227 228 229 230 232 241 243 243 248 256 257 257 259 265 266 283 289 314 319 323 328 330 331 331 336 342 355 356 357 358 363 369 371 378 387 394 404 414 417 418 420 429 434 445 449 452 459 465 468 470 470 475 478 484 485 492 502 505 522 532 542 544 546 546 549 549 551 555 555 563 576 593 598 598 599 606 607 612 616 620 635 645 647 652 654 661 670 677 678 679 680 683 691 693 706 713 713 726 729 735 735 740 741 748 749 751 764 776 783 785 792 798 806 806 807 808 820 826 828 838 841 853 857 863 863 863 864 869 877 882 895 899 911 913 922 934 934 935 936 943 950 954 954 956 966 966 967 969 984 992 994 1010 1012 1014 1021 1024 1036 1039 1049 1051 1063 1065 1068 1069 1071 1071 1081 1082 1091 1095 1097 1097 1099 1120 1120 1138 1140 1149 1152 1154 1158 1161 1162 1165 1183 1183 1184 1191 1196 1199 1200 1210 1212 1223 1225 1225 1232 1251 1253 1257 1268 1277 1277 1278 1281 1286 1297 1298 1298 1311 1312 1322 1327 1338 1340 1340 1347 1348 1352 1353 1360 1367 1381 1385 1399 1406 1413 1414 1418 1418 1419 1426 1426 1428 1439 1444 1454 1455 1468 1468 1469 1480 1485 1488 1489 1489 1498 1509 1513 1515 1534 1541 1541 1543 1554 1556 1566 1567 1570 1575 1582 1583 1583 1601 1604 1605 1608 1612 1614 1617 1626 1628 1646 1646 1667 1669 1669 1671 1675 1684 1685 1695 1695 1697 1698 1701 1703 1715 1717 1727 1730 1742 1745 1752 1754 1756 1772 1774 1782 1797 1799 1800 1800 1810 1812 1812 1816 1823 1830 1831 1832 1832 1844 1853 1855 1867 1871 1884 1889 1897 1902 1903 1903 1903 1909 1913 1925 1928 1938 1940 1946 1958 1959 1960 1960 1968 1974 1981 1983 1990 2002 2015 2017 2018 2025 2026 2031 2031 2037 2040 2053 2053 2060 2073 2075 2083 2086 2087 2088 2089 2096 2105 2112 2114 2119 2121 2131 2146 2150 2154 2159 2160 2167 2168 2168 2173 2190 2203 2211 2211 2215 2217 2217 2220 2220 2222 2224 2234 2244 2261 2264 2274 2281 2282 2288 2291 2296 2296 2298 2301 2307 2314 2317 2321 2332 2337 2346 2348 2349 2352 2362 2372 2379 2388 2395 2397 2403 2408 2409 2410 2411 2424 2430 2435 2435 2436 2438 2443 2447 2452 2477 2483 2500 2501 2507 2509 2509 2510 2518 2523 2523 2525 2534 2536 2537 2538 2539 2548 2550 2551 2558 2564 2580 2580 2580 2619 2629 2629 2635 2637 2638 2638 2638 2638 2651 2651 2651 2652 2653 2663 2665 2667 2669 2679 2695 2695 2766"
    Spectrum = specString.split()
    Spectrum = list(int(num) for num in Spectrum)
    ans=LeaderboardCycloSpectrumSequencing(Spectrum,N)
    an=PeptideBreakDown(ans)
    f = open('file.txt','w')
    for a in an:
        f.writelines(str(a)+"-")
        '''
    #print SpectralConvolution

    spec="0 86 160 234 308 320 382"
    Spectrum=spec.split()
    Spectrum=list(int(num) for num in Spectrum)
    ans=SpectralConvolution(Spectrum)
    print(ans)
    f=open('file.txt','w')
    for a in ans:
        f.writelines(str(a)+" ")
    